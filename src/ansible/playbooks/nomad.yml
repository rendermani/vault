---
- name: Install and Configure Nomad
  hosts: nomad_servers
  become: yes
  
  vars:
    nomad_user: nomad
    nomad_group: nomad
    nomad_home: /opt/nomad
    nomad_data_dir: /opt/nomad/data
    nomad_config_dir: /etc/nomad.d
    nomad_log_dir: /var/log/nomad
    nomad_binary: /usr/local/bin/nomad
    
  tasks:
    - name: Create nomad group
      group:
        name: "{{ nomad_group }}"
        state: present

    - name: Create nomad user
      user:
        name: "{{ nomad_user }}"
        group: "{{ nomad_group }}"
        groups: docker
        system: yes
        home: "{{ nomad_home }}"
        shell: /bin/false
        create_home: no

    - name: Create nomad directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ nomad_user }}"
        group: "{{ nomad_group }}"
        mode: '0755'
      loop:
        - "{{ nomad_home }}"
        - "{{ nomad_data_dir }}"
        - "{{ nomad_config_dir }}"
        - "{{ nomad_log_dir }}"

    - name: Download Nomad
      get_url:
        url: "https://releases.hashicorp.com/nomad/{{ nomad_version }}/nomad_{{ nomad_version }}_linux_amd64.zip"
        dest: "/tmp/nomad_{{ nomad_version }}_linux_amd64.zip"
        mode: '0644'
        timeout: 300
      register: nomad_download
      retries: 3
      delay: 10
      until: nomad_download is succeeded

    - name: Check if Nomad is already installed
      stat:
        path: "{{ nomad_binary }}"
      register: nomad_installed

    - name: Get installed Nomad version
      command: "{{ nomad_binary }} version"
      register: installed_nomad_version
      when: nomad_installed.stat.exists
      ignore_errors: yes
      changed_when: false

    - name: Unzip Nomad
      unarchive:
        src: "/tmp/nomad_{{ nomad_version }}_linux_amd64.zip"
        dest: /usr/local/bin
        owner: root
        group: root
        mode: '0755'
        remote_src: yes
      when: not nomad_installed.stat.exists or (installed_nomad_version.stdout is not search(nomad_version))
      notify: restart nomad

    - name: Create nomad configuration
      copy:
        dest: "{{ nomad_config_dir }}/nomad.hcl"
        content: |
          datacenter = "{{ nomad_datacenter }}"
          data_dir = "{{ nomad_data_dir }}"
          log_level = "{{ nomad_log_level }}"
          log_json = true
          
          bind_addr = "{{ ansible_default_ipv4.address | default('127.0.0.1') }}"
          
          server {
            enabled = true
            bootstrap_expect = 1
            
            # Disable job submission from UI/API for security
            # job_gc_threshold = "4h"
            # eval_gc_threshold = "1h"
            # deployment_gc_threshold = "1h"
          }
          
          client {
            enabled = true
            
            # Network interface for client connections
            network_interface = "lo"
            
            servers = ["{{ ansible_default_ipv4.address | default('127.0.0.1') }}:4647"]
            
            # Host volumes for persistent storage
            host_volume "nomad_data" {
              path      = "/opt/nomad/data/volumes"
              read_only = false
            }
          }
          
          consul {
            address = "{{ ansible_default_ipv4.address | default('127.0.0.1') }}:8500"
            server_service_name = "nomad-server"
            client_service_name = "nomad-client"
            auto_advertise = true
            server_auto_join = true
            client_auto_join = true
            tags = ["{{ environment | default('dev') }}", "nomad-server"]
          }
          
          ui_config {
            enabled = true
            consul {
              ui_url = "http://{{ ansible_default_ipv4.address | default('127.0.0.1') }}:8500/ui"
            }
            vault {
              ui_url = "http://{{ ansible_default_ipv4.address | default('127.0.0.1') }}:8200/ui"
            }
          }
          
          telemetry {
            publish_allocation_metrics = true
            publish_node_metrics = true
            prometheus_metrics = true
          }
          
          plugin "docker" {
            config {
              enabled = true
              allow_privileged = {{ docker_allow_privileged | default(false) | lower }}
              allow_caps = ["audit_write", "chown", "dac_override", "fowner", "fsetid", "kill", "mknod", "net_bind_service", "setfcap", "setgid", "setpcap", "setuid", "sys_chroot"]
              volumes {
                enabled = true
                selinuxlabel = "z"
              }
              
              # Security settings
              allow_runtime = "runc"
              disable_log_collection = false
              
              # Resource limits
              gc {
                image       = true
                image_delay = "3m"
                container   = true
                dangling_containers {
                  enabled        = true
                  dry_run        = false
                  period         = "5m"
                  creation_grace = "5m"
                }
              }
            }
          }
          
          plugin "raw_exec" {
            config {
              enabled = {{ nomad_raw_exec_enabled | default(false) | lower }}
            }
          }
        owner: "{{ nomad_user }}"
        group: "{{ nomad_group }}"
        mode: '0640'
      notify: restart nomad

    - name: Create nomad systemd service
      copy:
        dest: /etc/systemd/system/nomad.service
        content: |
          [Unit]
          Description=Nomad
          Documentation=https://www.nomadproject.io/
          Wants=network-online.target
          After=network-online.target
          ConditionFileNotEmpty={{ nomad_config_dir }}/nomad.hcl

          [Service]
          Type=notify
          User={{ nomad_user }}
          Group={{ nomad_group }}
          ExecStart={{ nomad_binary }} agent -config={{ nomad_config_dir }}
          ExecReload=/bin/kill -HUP $MAINPID
          KillMode=process
          Restart=on-failure
          LimitNOFILE=65536
          StandardOutput=journal
          StandardError=journal
          SyslogIdentifier=nomad

          [Install]
          WantedBy=multi-user.target
      notify:
        - reload systemd
        - restart nomad

    - name: Create logrotate configuration for nomad
      copy:
        dest: /etc/logrotate.d/nomad
        content: |
          /var/log/nomad/*.log {
              daily
              missingok
              rotate 7
              compress
              notifempty
              create 0640 {{ nomad_user }} {{ nomad_group }}
              postrotate
                  systemctl reload nomad > /dev/null 2>&1 || true
              endscript
          }

    - name: Start and enable nomad service
      systemd:
        name: nomad
        state: started
        enabled: yes

    - name: Create nomad data volumes directory
      file:
        path: /opt/nomad/data/volumes
        state: directory
        owner: "{{ nomad_user }}"
        group: "{{ nomad_group }}"
        mode: '0755'

    - name: Wait for nomad to be ready
      wait_for:
        host: "{{ ansible_default_ipv4.address | default('127.0.0.1') }}"
        port: "{{ nomad_port }}"
        timeout: 120
        delay: 5

    - name: Verify nomad server status
      uri:
        url: "http://{{ ansible_default_ipv4.address | default('127.0.0.1') }}:{{ nomad_port }}/v1/status/leader"
        method: GET
        timeout: 30
      register: nomad_leader
      retries: 10
      delay: 6
      until: nomad_leader.status == 200

    - name: Show nomad server status
      debug:
        msg: "Nomad leader: {{ nomad_leader.json }}"

    - name: Check nomad node status
      uri:
        url: "http://{{ ansible_default_ipv4.address | default('127.0.0.1') }}:{{ nomad_port }}/v1/nodes"
        method: GET
        timeout: 30
      register: nomad_nodes
      retries: 10
      delay: 5
      until: nomad_nodes.status == 200

    - name: Show nomad nodes
      debug:
        msg: "Nomad nodes: {{ nomad_nodes.json | length }} registered"

  handlers:
    - name: reload systemd
      systemd:
        daemon_reload: yes

    - name: restart nomad
      systemd:
        name: nomad
        state: restarted