name: Deploy Infrastructure - Remote Server (root@cloudya.net)

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'infrastructure/nomad/**'
      - 'infrastructure/vault/**'
      - 'infrastructure/traefik/**'
      - 'infrastructure/core/**'
      - 'infrastructure/scripts/**'
      - '.github/workflows/deploy.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'infrastructure/nomad/**'
      - 'infrastructure/vault/**'
      - 'infrastructure/traefik/**'
      - 'infrastructure/core/**'
      - 'infrastructure/scripts/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - develop
          - staging
          - production
        default: 'develop'
      force_bootstrap:
        description: 'Force complete bootstrap (destroys existing data)'
        required: false
        type: boolean
        default: false
      components:
        description: 'Components to deploy (comma-separated: nomad,vault,traefik or "all")'
        required: false
        type: string
        default: 'all'
      dry_run:
        description: 'Perform dry run without actual deployment'
        required: false
        type: boolean
        default: false
      enable_rollback:
        description: 'Enable rollback system integration'
        required: false
        type: boolean
        default: true
      rollback_checkpoint:
        description: 'Rollback to specific checkpoint (if provided, skips deployment)'
        required: false
        type: string
        default: ''
      checkpoint_name:
        description: 'Custom name for rollback checkpoint'
        required: false
        type: string
        default: ''

env:
  # Remote server configuration
  REMOTE_SERVER: "cloudya.net"
  REMOTE_USER: "root"
  REMOTE_PORT: "22"
  
  # HashiCorp tool versions
  NOMAD_VERSION: 1.7.2
  VAULT_VERSION: 1.15.4
  CONSUL_VERSION: 1.17.0
  
  # Remote service endpoints (will be configured on remote server)
  NOMAD_ADDR: "http://localhost:4646"
  CONSUL_HTTP_ADDR: "http://localhost:8500"
  VAULT_ADDR: "http://localhost:8200"

jobs:
  # Job 1: Local testing with docker-compose (optional)
  local-testing:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test with docker-compose
        run: |
          echo "Running local integration tests with docker-compose..."
          cd infrastructure
          # Test infrastructure stack
          docker-compose -f docker-compose.local-test.yml config
          echo "Local test infrastructure configuration validated"
          
          # Start services and run basic connectivity tests
          docker-compose -f docker-compose.local-test.yml up -d
          
          # Wait for services to be ready
          echo "Waiting for services to start..."
          sleep 30
          
          # Basic health checks
          curl -f http://localhost:8500/v1/status/leader || echo "Consul not ready"
          curl -f http://localhost:4646/v1/status/leader || echo "Nomad not ready"
          curl -f http://localhost:8200/v1/sys/health || echo "Vault not ready"
          curl -f http://localhost:8080/ping || echo "Traefik not ready"
          
          # Cleanup
          docker-compose -f docker-compose.local-test.yml down -v

      - name: Validate deployment scripts
        run: |
          echo "Validating deployment scripts..."
          cd infrastructure
          bash -n scripts/unified-bootstrap-systemd.sh
          echo "Deployment script syntax validated"

  # Job 2: Prepare remote deployment
  prepare-deployment:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    outputs:
      environment: ${{ steps.determine-env.outputs.environment }}
      deploy-nomad: ${{ steps.determine-components.outputs.deploy-nomad }}
      deploy-vault: ${{ steps.determine-components.outputs.deploy-vault }}
      deploy-traefik: ${{ steps.determine-components.outputs.deploy-traefik }}
      is-bootstrap: ${{ steps.determine-strategy.outputs.is-bootstrap }}
      vault-addr: ${{ steps.determine-env.outputs.vault-addr }}
      nomad-addr: ${{ steps.determine-env.outputs.nomad-addr }}
      rollback-mode: ${{ steps.determine-rollback.outputs.rollback-mode }}
      rollback-checkpoint: ${{ steps.determine-rollback.outputs.rollback-checkpoint }}
      enable-rollback: ${{ steps.determine-rollback.outputs.enable-rollback }}
      checkpoint-name: ${{ steps.determine-rollback.outputs.checkpoint-name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine deployment environment
        id: determine-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENV="${{ github.event.inputs.environment }}"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            ENV="production"
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            ENV="develop"
          else
            ENV="develop"
          fi
          
          echo "environment=$ENV" >> $GITHUB_OUTPUT
          
          # Set environment-specific endpoints (on remote server)
          case $ENV in
            develop)
              echo "vault-addr=http://localhost:8200" >> $GITHUB_OUTPUT
              echo "nomad-addr=http://localhost:4646" >> $GITHUB_OUTPUT
              ;;
            staging)
              echo "vault-addr=https://localhost:8210" >> $GITHUB_OUTPUT
              echo "nomad-addr=http://localhost:4646" >> $GITHUB_OUTPUT
              ;;
            production)
              echo "vault-addr=https://localhost:8220" >> $GITHUB_OUTPUT
              echo "nomad-addr=http://localhost:4646" >> $GITHUB_OUTPUT
              ;;
          esac
          
          echo "Determined environment: $ENV for remote server ${{ env.REMOTE_SERVER }}"

      - name: Determine components to deploy
        id: determine-components
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            COMPONENTS="${{ github.event.inputs.components }}"
          else
            COMPONENTS="all"
          fi
          
          if [[ "$COMPONENTS" == "all" ]]; then
            echo "deploy-nomad=true" >> $GITHUB_OUTPUT
            echo "deploy-vault=true" >> $GITHUB_OUTPUT
            echo "deploy-traefik=true" >> $GITHUB_OUTPUT
          else
            echo "deploy-nomad=false" >> $GITHUB_OUTPUT
            echo "deploy-vault=false" >> $GITHUB_OUTPUT
            echo "deploy-traefik=false" >> $GITHUB_OUTPUT
            
            IFS=',' read -ra COMP_ARRAY <<< "$COMPONENTS"
            for component in "${COMP_ARRAY[@]}"; do
              case $component in
                nomad)
                  echo "deploy-nomad=true" >> $GITHUB_OUTPUT
                  ;;
                vault)
                  echo "deploy-vault=true" >> $GITHUB_OUTPUT
                  ;;
                traefik)
                  echo "deploy-traefik=true" >> $GITHUB_OUTPUT
                  ;;
              esac
            done
          fi
          
          echo "Components to deploy on remote server: $COMPONENTS"

      - name: Determine deployment strategy
        id: determine-strategy
        run: |
          IS_BOOTSTRAP="false"
          
          # Check if this is a bootstrap deployment
          if [[ "${{ github.event.inputs.force_bootstrap }}" == "true" ]]; then
            IS_BOOTSTRAP="true"
            echo "Force bootstrap requested for remote server"
          elif [[ ! -f "infrastructure/environments/${{ steps.determine-env.outputs.environment }}/.deployed" ]]; then
            IS_BOOTSTRAP="true"
            echo "No deployment marker found, assuming bootstrap deployment to remote server"
          fi
          
          echo "is-bootstrap=$IS_BOOTSTRAP" >> $GITHUB_OUTPUT
          echo "Bootstrap deployment to ${{ env.REMOTE_SERVER }}: $IS_BOOTSTRAP"

      - name: Determine rollback strategy
        id: determine-rollback
        run: |
          # Check if this is a rollback operation
          if [[ -n "${{ github.event.inputs.rollback_checkpoint }}" ]]; then
            echo "rollback-mode=true" >> $GITHUB_OUTPUT
            echo "rollback-checkpoint=${{ github.event.inputs.rollback_checkpoint }}" >> $GITHUB_OUTPUT
            echo "enable-rollback=true" >> $GITHUB_OUTPUT
            echo "checkpoint-name=" >> $GITHUB_OUTPUT
            echo "Rollback mode: Rolling back to checkpoint ${{ github.event.inputs.rollback_checkpoint }}"
          else
            echo "rollback-mode=false" >> $GITHUB_OUTPUT
            echo "rollback-checkpoint=" >> $GITHUB_OUTPUT
            echo "enable-rollback=${{ github.event.inputs.enable_rollback || 'true' }}" >> $GITHUB_OUTPUT
            echo "checkpoint-name=${{ github.event.inputs.checkpoint_name }}" >> $GITHUB_OUTPUT
            echo "Normal deployment mode with rollback system enabled: ${{ github.event.inputs.enable_rollback || 'true' }}"
          fi

  # Job 3: Setup SSH connection and prepare remote server
  setup-remote-server:
    runs-on: ubuntu-latest
    needs: prepare-deployment
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ env.REMOTE_SERVER }} >> ~/.ssh/known_hosts

      - name: Test SSH connection
        run: |
          echo "Testing SSH connection to ${{ env.REMOTE_USER }}@${{ env.REMOTE_SERVER }}..."
          ssh -o ConnectTimeout=10 -o BatchMode=yes ${{ env.REMOTE_USER }}@${{ env.REMOTE_SERVER }} 'echo "SSH connection successful"'

      - name: Prepare remote server
        run: |
          echo "Preparing remote server for deployment..."
          ssh ${{ env.REMOTE_USER }}@${{ env.REMOTE_SERVER }} << 'EOF'
            set -euo pipefail
            echo "Updating system packages..."
            apt-get update
            apt-get install -y curl wget unzip jq docker.io docker-compose netstat-nat lsof
            
            # Start Docker
            systemctl enable docker
            systemctl start docker
            
            # Ensure Docker is working
            if ! docker info >/dev/null 2>&1; then
              echo "ERROR: Docker is not properly configured"
              exit 1
            fi
            
            # Create infrastructure directory
            mkdir -p /opt/infrastructure
            
            # Install HashiCorp tools
            cd /tmp
            
            # Install Nomad
            if [[ ! -f /usr/local/bin/nomad ]] || [[ "$(nomad version | head -1 | grep -o 'v[0-9.]*')" != "v${{ env.NOMAD_VERSION }}" ]]; then
              echo "Installing Nomad ${{ env.NOMAD_VERSION }}..."
              curl -fsSL https://releases.hashicorp.com/nomad/${{ env.NOMAD_VERSION }}/nomad_${{ env.NOMAD_VERSION }}_linux_amd64.zip -o nomad.zip
              unzip nomad.zip
              mv nomad /usr/local/bin/
              chmod +x /usr/local/bin/nomad
              rm nomad.zip
            fi
            
            # Install Vault
            if [[ ! -f /usr/local/bin/vault ]] || [[ "$(vault version | head -1 | grep -o 'v[0-9.]*')" != "v${{ env.VAULT_VERSION }}" ]]; then
              echo "Installing Vault ${{ env.VAULT_VERSION }}..."
              curl -fsSL https://releases.hashicorp.com/vault/${{ env.VAULT_VERSION }}/vault_${{ env.VAULT_VERSION }}_linux_amd64.zip -o vault.zip
              unzip vault.zip
              mv vault /usr/local/bin/
              chmod +x /usr/local/bin/vault
              rm vault.zip
            fi
            
            # Install Consul
            if [[ ! -f /usr/local/bin/consul ]] || [[ "$(consul version | head -1 | grep -o 'v[0-9.]*')" != "v${{ env.CONSUL_VERSION }}" ]]; then
              echo "Installing Consul ${{ env.CONSUL_VERSION }}..."
              curl -fsSL https://releases.hashicorp.com/consul/${{ env.CONSUL_VERSION }}/consul_${{ env.CONSUL_VERSION }}_linux_amd64.zip -o consul.zip
              unzip consul.zip
              mv consul /usr/local/bin/
              chmod +x /usr/local/bin/consul
              rm consul.zip
            fi
            
            # Verify installations
            echo "Verifying tool installations..."
            nomad version
            vault version
            consul version
            docker --version
            
            # Stop any running services to prevent conflicts
            echo "Stopping any existing services..."
            systemctl stop nomad 2>/dev/null || echo "Nomad was not running"
            systemctl stop consul 2>/dev/null || echo "Consul was not running"
            
            # Clear any conflicting processes on required ports
            for port in 8500 4646 4647 4648; do
              if lsof -i ":$port" >/dev/null 2>&1; then
                echo "Killing processes on port $port..."
                lsof -ti ":$port" | xargs kill -9 2>/dev/null || true
              fi
            done
            
            echo "Remote server preparation completed successfully"
          EOF

      - name: Transfer rollback manager
        run: |
          echo "Ensuring rollback manager is available on remote server..."
          # The rollback manager will be transferred with the infrastructure code
          # but we want to make sure it's executable
          ssh ${{ env.REMOTE_USER }}@${{ env.REMOTE_SERVER }} << 'EOF'
            # Create rollback directories
            mkdir -p /var/rollback/cloudya/{checkpoints,temp,logs}
            mkdir -p /var/log/cloudya
            
            # Set proper permissions for rollback system
            chmod 700 /var/rollback/cloudya
            chmod 755 /var/log/cloudya
            
            echo "Rollback directories prepared"
          EOF

      - name: Transfer infrastructure code
        run: |
          echo "Transferring infrastructure code to remote server..."
          
          # Workaround for broken submodule: Copy nomad job files from working location
          echo "Working around broken git submodule for nomad jobs..."
          
          # Debug: Show what directories exist
          echo "DEBUG: Current directory structure:"
          find infrastructure -type d -name "*nomad*" -o -name "*vault*" -o -name "*jobs*" | head -10
          echo "DEBUG: Looking for any vault.nomad files:"
          find infrastructure -name "vault.nomad" -type f | head -10
          
          if [[ ! -d infrastructure/nomad/jobs ]] || [[ ! -f infrastructure/nomad/jobs/production/vault.nomad ]]; then
            echo "Nomad jobs directory missing, generating vault.nomad files..."
            
            # Use external script to generate vault.nomad files (fixes YAML heredoc syntax issue)
            chmod +x scripts/generate-vault-nomad.sh
            bash scripts/generate-vault-nomad.sh
            
            # Verify generation worked
            if [[ -f infrastructure/nomad/jobs/production/vault.nomad ]]; then
              echo "✅ Successfully generated vault.nomad files"
            else
              echo "❌ Failed to generate vault.nomad files - deployment will fail"
              exit 1
            fi
          else
            echo "✓ Nomad jobs directory already exists"
          fi
          
          # Create a temporary archive of the infrastructure code
          tar czf infrastructure.tar.gz \
            --exclude='.git' \
            --exclude='*.log' \
            --exclude='tmp/' \
            --exclude='test-results/' \
            infrastructure/
          
          # Transfer to remote server
          scp infrastructure.tar.gz ${{ env.REMOTE_USER }}@${{ env.REMOTE_SERVER }}:/opt/
          
          # Extract on remote server with proper directory preservation
          ssh ${{ env.REMOTE_USER }}@${{ env.REMOTE_SERVER }} << 'EOF'
            cd /opt
            # Remove existing infrastructure directory if it exists
            rm -rf /opt/infrastructure
            # Extract archive (this creates /opt/infrastructure/ automatically)
            tar xzf infrastructure.tar.gz
            rm infrastructure.tar.gz
            chmod +x infrastructure/scripts/*.sh
            
            # Verify critical directories exist
            echo "Verifying infrastructure directory structure..."
            ls -la infrastructure/
            ls -la infrastructure/nomad/
            if [[ -d infrastructure/nomad/jobs ]]; then
              echo "✓ Nomad jobs directory exists"
              ls -la infrastructure/nomad/jobs/
              if [[ -d infrastructure/nomad/jobs/production ]]; then
                echo "✓ Production jobs directory exists"
                ls -la infrastructure/nomad/jobs/production/
              else
                echo "⚠ Production jobs directory missing"
              fi
            else
              echo "✗ Nomad jobs directory missing - this will cause deployment failure"
              exit 1
            fi
            
            echo "Infrastructure code transferred and verified successfully"
          EOF

  # Job 4: Perform rollback operation (if requested)
  perform-rollback:
    runs-on: ubuntu-latest
    needs: [prepare-deployment, setup-remote-server]
    if: needs.prepare-deployment.outputs.rollback-mode == 'true'
    environment: ${{ needs.prepare-deployment.outputs.environment }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ env.REMOTE_SERVER }} >> ~/.ssh/known_hosts

      - name: Execute rollback operation
        run: |
          echo "Executing rollback to checkpoint: ${{ needs.prepare-deployment.outputs.rollback-checkpoint }}"
          ssh ${{ env.REMOTE_USER }}@${{ env.REMOTE_SERVER }} << 'ROLLBACK_SCRIPT'
            set -euo pipefail
            cd /opt/infrastructure
            
            echo "Starting rollback operation..."
            echo "  Target checkpoint: ${{ needs.prepare-deployment.outputs.rollback-checkpoint }}"
            echo "  Environment: ${{ needs.prepare-deployment.outputs.environment }}"
            
            # Make rollback manager executable
            chmod +x scripts/rollback-manager.sh
            
            # List available checkpoints
            echo ""
            echo "=== Available Checkpoints ==="
            ./scripts/rollback-manager.sh list
            
            # Verify checkpoint exists
            echo ""
            echo "=== Verifying Checkpoint ==="
            if ./scripts/rollback-manager.sh verify "${{ needs.prepare-deployment.outputs.rollback-checkpoint }}"; then
              echo "Checkpoint verification passed"
            else
              echo "Checkpoint verification failed - aborting rollback"
              exit 1
            fi
            
            # Perform rollback
            echo ""
            echo "=== Performing Rollback ==="
            ./scripts/rollback-manager.sh rollback "${{ needs.prepare-deployment.outputs.rollback-checkpoint }}"
            
            echo "Rollback operation completed"
          ROLLBACK_SCRIPT

      - name: Validate rollback
        run: |
          echo "Validating rollback operation..."
          ssh ${{ env.REMOTE_USER }}@${{ env.REMOTE_SERVER }} << 'ROLLBACK_VALIDATION'
            set -euo pipefail
            cd /opt/infrastructure
            
            echo "Checking service status after rollback..."
            
            # Wait for services to stabilize
            sleep 15
            
            # Check service health
            echo ""
            echo "=== Service Status After Rollback ==="
            ./scripts/manage-services.sh status || true
            
            # Basic health checks
            if systemctl is-active --quiet consul 2>/dev/null; then
              echo "✓ Consul service is active"
              curl -s http://localhost:8500/v1/status/leader > /dev/null 2>&1 && echo "✓ Consul API responding" || echo "⚠ Consul API not responding"
            else
              echo "⚠ Consul service is not active"
            fi
            
            if systemctl is-active --quiet nomad 2>/dev/null; then
              echo "✓ Nomad service is active"
              curl -s http://localhost:4646/v1/status/leader > /dev/null 2>&1 && echo "✓ Nomad API responding" || echo "⚠ Nomad API not responding"
            else
              echo "⚠ Nomad service is not active"
            fi
            
            echo ""
            echo "=== Rollback Validation Complete ==="
          ROLLBACK_VALIDATION

      - name: Generate rollback summary
        if: always()
        run: |
          echo "## Rollback Operation Summary" >> $GITHUB_STEP_SUMMARY
          echo "### Remote Server: ${{ env.REMOTE_SERVER }}" >> $GITHUB_STEP_SUMMARY
          echo "### Environment: ${{ needs.prepare-deployment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "### Target Checkpoint: ${{ needs.prepare-deployment.outputs.rollback-checkpoint }}" >> $GITHUB_STEP_SUMMARY
          echo "### Operation: System Rollback" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "✅ **Rollback completed successfully**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The system has been restored to the state captured in the specified checkpoint." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Rollback operation failed**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The rollback operation encountered errors. Manual intervention may be required." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Post-Rollback Commands:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Check rollback system status" >> $GITHUB_STEP_SUMMARY
          echo "ssh ${{ env.REMOTE_USER }}@${{ env.REMOTE_SERVER }} 'cd /opt/infrastructure && ./scripts/rollback-manager.sh status'" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# List all checkpoints" >> $GITHUB_STEP_SUMMARY
          echo "ssh ${{ env.REMOTE_USER }}@${{ env.REMOTE_SERVER }} 'cd /opt/infrastructure && ./scripts/rollback-manager.sh list'" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Check service status" >> $GITHUB_STEP_SUMMARY
          echo "ssh ${{ env.REMOTE_USER }}@${{ env.REMOTE_SERVER }} 'cd /opt/infrastructure && ./scripts/manage-services.sh status'" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  # Job 5: Deploy infrastructure to remote server
  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: [prepare-deployment, setup-remote-server]
    if: github.event_name != 'pull_request' && needs.prepare-deployment.outputs.rollback-mode != 'true'
    environment: ${{ needs.prepare-deployment.outputs.environment }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ env.REMOTE_SERVER }} >> ~/.ssh/known_hosts

      - name: Setup deployment environment variables
        run: |
          echo "Setting up deployment configuration..."
          echo "ENVIRONMENT=${{ needs.prepare-deployment.outputs.environment }}" >> deployment.env
          echo "DEPLOY_NOMAD=${{ needs.prepare-deployment.outputs.deploy-nomad }}" >> deployment.env
          echo "DEPLOY_VAULT=${{ needs.prepare-deployment.outputs.deploy-vault }}" >> deployment.env
          echo "DEPLOY_TRAEFIK=${{ needs.prepare-deployment.outputs.deploy-traefik }}" >> deployment.env
          echo "IS_BOOTSTRAP=${{ needs.prepare-deployment.outputs.is-bootstrap }}" >> deployment.env
          echo "DRY_RUN=${{ github.event.inputs.dry_run || 'false' }}" >> deployment.env
          echo "FORCE_BOOTSTRAP=${{ github.event.inputs.force_bootstrap || 'false' }}" >> deployment.env
          echo "COMPONENTS=${{ github.event.inputs.components || 'all' }}" >> deployment.env
          echo "ENABLE_ROLLBACK=${{ needs.prepare-deployment.outputs.enable-rollback }}" >> deployment.env
          echo "CHECKPOINT_NAME=${{ needs.prepare-deployment.outputs.checkpoint-name }}" >> deployment.env

      - name: Transfer deployment configuration
        run: |
          echo "Transferring deployment configuration to remote server..."
          scp deployment.env ${{ env.REMOTE_USER }}@${{ env.REMOTE_SERVER }}:/opt/infrastructure/

      - name: Pre-deployment validation
        run: |
          echo "Running pre-deployment validation on remote server..."
          ssh ${{ env.REMOTE_USER }}@${{ env.REMOTE_SERVER }} << 'VALIDATION_SCRIPT'
            set -euo pipefail
            cd /opt/infrastructure
            
            echo "Running service startup validator..."
            chmod +x scripts/service-startup-validator.sh
            ./scripts/service-startup-validator.sh --test-only --verbose
            
            echo "Pre-deployment validation completed successfully"
          VALIDATION_SCRIPT

      - name: Execute remote deployment
        env:
          ENVIRONMENT: ${{ needs.prepare-deployment.outputs.environment }}
          NOMAD_BOOTSTRAP_TOKEN: ${{ secrets.NOMAD_BOOTSTRAP_TOKEN }}
          CONSUL_BOOTSTRAP_TOKEN: ${{ secrets.CONSUL_BOOTSTRAP_TOKEN }}
        run: |
          echo "Executing infrastructure deployment on remote server..."
          ssh ${{ env.REMOTE_USER }}@${{ env.REMOTE_SERVER }} << 'REMOTE_SCRIPT'
            set -euo pipefail
            cd /opt/infrastructure
            
            # Source deployment configuration
            source deployment.env
            
            echo "Starting deployment with configuration:"
            echo "  Environment: $ENVIRONMENT"
            echo "  Components: $COMPONENTS"
            echo "  Bootstrap: $IS_BOOTSTRAP"
            echo "  Dry Run: $DRY_RUN"
            
            # Export required environment variables
            export NOMAD_BOOTSTRAP_TOKEN="${{ env.NOMAD_BOOTSTRAP_TOKEN }}"
            export CONSUL_BOOTSTRAP_TOKEN="${{ env.CONSUL_BOOTSTRAP_TOKEN }}"
            
            # Make deployment scripts executable
            chmod +x scripts/unified-bootstrap-systemd.sh
            chmod +x scripts/manage-services.sh
            chmod +x scripts/rollback-manager.sh
            
            # Execute deployment based on configuration using the systemd version
            if [[ "$DRY_RUN" == "true" ]]; then
              echo "Performing dry run deployment..."
              deployment_args=("--environment" "$ENVIRONMENT" "--components" "$COMPONENTS" "--dry-run" "--verbose")
            else
              echo "Performing actual deployment..."
              deployment_args=("--environment" "$ENVIRONMENT" "--components" "$COMPONENTS" "--verbose")
              
              if [[ "$FORCE_BOOTSTRAP" == "true" ]]; then
                deployment_args+=("--force-bootstrap")
              fi
            fi
            
            # Add rollback configuration
            if [[ "$ENABLE_ROLLBACK" == "false" ]]; then
              deployment_args+=("--no-rollback")
            fi
            
            if [[ -n "$CHECKPOINT_NAME" ]]; then
              deployment_args+=("--checkpoint-name" "$CHECKPOINT_NAME")
            fi
            
            # Execute deployment
            ./scripts/unified-bootstrap-systemd.sh "${deployment_args[@]}"
            
            echo "Remote deployment completed successfully"
          REMOTE_SCRIPT

      - name: Validate remote deployment
        run: |
          echo "Validating infrastructure deployment on remote server..."
          ssh ${{ env.REMOTE_USER }}@${{ env.REMOTE_SERVER }} << 'REMOTE_VALIDATION'
            set -euo pipefail
            cd /opt/infrastructure
            
            # Source deployment configuration
            source deployment.env
            
            if [[ "$DRY_RUN" != "true" ]]; then
              echo "Running comprehensive deployment health check..."
              chmod +x scripts/deployment-health-check.sh
              
              # Set environment for health check
              export ENVIRONMENT="$ENVIRONMENT"
              
              # Run comprehensive health check based on deployed components
              if [[ "$DEPLOY_NOMAD" == "true" && "$DEPLOY_VAULT" == "false" && "$DEPLOY_TRAEFIK" == "false" ]]; then
                ./scripts/deployment-health-check.sh --nomad-only --verbose
              elif [[ "$DEPLOY_NOMAD" == "false" && "$DEPLOY_VAULT" == "true" && "$DEPLOY_TRAEFIK" == "false" ]]; then
                ./scripts/deployment-health-check.sh --skip-traefik --verbose
              elif [[ "$COMPONENTS" == "all" ]]; then
                ./scripts/deployment-health-check.sh --verbose
              else
                # Custom component selection
                health_check_args="--verbose"
                [[ "$DEPLOY_VAULT" == "false" ]] && health_check_args="$health_check_args --skip-vault"
                [[ "$DEPLOY_TRAEFIK" == "false" ]] && health_check_args="$health_check_args --skip-traefik"
                ./scripts/deployment-health-check.sh $health_check_args
              fi
              
              # Additional service status check
              echo ""
              echo "=== Detailed Service Status ==="
              ./scripts/manage-services.sh status
              
            else
              echo "Dry run completed - no services to validate"
            fi
            
            echo "Remote validation completed"
          REMOTE_VALIDATION

      - name: Collect deployment logs
        if: always()
        run: |
          echo "Collecting deployment logs from remote server..."
          ssh ${{ env.REMOTE_USER }}@${{ env.REMOTE_SERVER }} << 'REMOTE_LOGS'
            set -euo pipefail
            cd /opt/infrastructure
            
            echo "=== Deployment Summary ==="
            if [[ -f deployment.log ]]; then
              echo "Last 50 lines of deployment log:"
              tail -50 deployment.log
            else
              echo "No deployment log found"
            fi
            
            echo "\n=== System Status ==="
            echo "Docker status:"
            systemctl is-active docker || echo "Docker not active"
            
            echo "\n=== Systemd Service Status ==="
            systemctl is-active consul && echo "Consul: Active" || echo "Consul: Inactive"
            systemctl is-active nomad && echo "Nomad: Active" || echo "Nomad: Inactive"
            
            echo "\n=== Service Logs ==="
            ./scripts/manage-services.sh logs 2>/dev/null || echo "Could not retrieve service logs"
            
            echo "\nPort status:"
            netstat -tlnp | grep -E ":(4646|8200|8500|8080)" || echo "No relevant ports listening"
            
          REMOTE_LOGS

      - name: Create deployment artifact
        if: success() && needs.prepare-deployment.outputs.is-bootstrap == 'true'
        run: |
          echo "Creating deployment artifact..."
          ssh ${{ env.REMOTE_USER }}@${{ env.REMOTE_SERVER }} << 'REMOTE_ARTIFACT'
            set -euo pipefail
            cd /opt/infrastructure
            
            # Create deployment summary
            cat > deployment-summary.json <<EOF
          {
            "timestamp": "$(date -u +"%Y-%m-%d %H:%M:%S UTC")",
            "environment": "$(grep ENVIRONMENT= deployment.env | cut -d= -f2)",
            "components": "$(grep COMPONENTS= deployment.env | cut -d= -f2)",
            "bootstrap": $(grep IS_BOOTSTRAP= deployment.env | cut -d= -f2),
            "server": "${{ env.REMOTE_SERVER }}",
            "workflow_run": "${{ github.run_id }}",
            "commit": "${{ github.sha }}"
          }
          EOF
            
            echo "Deployment artifact created"
          REMOTE_ARTIFACT

      - name: Generate deployment summary
        if: always()
        run: |
          echo "## Remote Infrastructure Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "### Remote Server: ${{ env.REMOTE_SERVER }}" >> $GITHUB_STEP_SUMMARY
          echo "### Environment: ${{ needs.prepare-deployment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "### Components Deployed:" >> $GITHUB_STEP_SUMMARY
          echo "- Nomad: ${{ needs.prepare-deployment.outputs.deploy-nomad }}" >> $GITHUB_STEP_SUMMARY
          echo "- Vault: ${{ needs.prepare-deployment.outputs.deploy-vault }}" >> $GITHUB_STEP_SUMMARY
          echo "- Traefik: ${{ needs.prepare-deployment.outputs.deploy-traefik }}" >> $GITHUB_STEP_SUMMARY
          echo "### Bootstrap: ${{ needs.prepare-deployment.outputs.is-bootstrap }}" >> $GITHUB_STEP_SUMMARY
          echo "### Dry Run: ${{ github.event.inputs.dry_run || 'false' }}" >> $GITHUB_STEP_SUMMARY
          echo "### Service Management: Systemd (Native Services)" >> $GITHUB_STEP_SUMMARY
          echo "### Rollback System: ${{ needs.prepare-deployment.outputs.enable-rollback }}" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ github.event.inputs.dry_run || 'false' }}" != "true" ]]; then
            echo "### Access URLs (via SSH tunnel):" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "# SSH tunnel to access services locally" >> $GITHUB_STEP_SUMMARY
            echo "ssh -L 4646:localhost:4646 -L 8200:localhost:8200 -L 8080:localhost:8080 ${{ env.REMOTE_USER }}@${{ env.REMOTE_SERVER }}" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "- Nomad UI: http://localhost:4646 (via tunnel)" >> $GITHUB_STEP_SUMMARY
            echo "- Vault UI: http://localhost:8200 (via tunnel)" >> $GITHUB_STEP_SUMMARY
            echo "- Traefik Dashboard: http://localhost:8080 (via tunnel)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Service Management Commands:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "# Check service status" >> $GITHUB_STEP_SUMMARY
            echo "ssh ${{ env.REMOTE_USER }}@${{ env.REMOTE_SERVER }} 'cd /opt/infrastructure && ./scripts/manage-services.sh status'" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "# Restart services" >> $GITHUB_STEP_SUMMARY
            echo "ssh ${{ env.REMOTE_USER }}@${{ env.REMOTE_SERVER }} 'cd /opt/infrastructure && ./scripts/manage-services.sh restart'" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "# View service logs" >> $GITHUB_STEP_SUMMARY
            echo "ssh ${{ env.REMOTE_USER }}@${{ env.REMOTE_SERVER }} 'cd /opt/infrastructure && ./scripts/manage-services.sh logs'" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "# Health check" >> $GITHUB_STEP_SUMMARY
            echo "ssh ${{ env.REMOTE_USER }}@${{ env.REMOTE_SERVER }} 'cd /opt/infrastructure && ./scripts/manage-services.sh health'" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            
            if [[ "${{ needs.prepare-deployment.outputs.enable-rollback }}" == "true" ]]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### Rollback Commands:" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
              echo "# List available checkpoints" >> $GITHUB_STEP_SUMMARY
              echo "ssh ${{ env.REMOTE_USER }}@${{ env.REMOTE_SERVER }} 'cd /opt/infrastructure && ./scripts/rollback-manager.sh list'" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "# Check rollback system status" >> $GITHUB_STEP_SUMMARY
              echo "ssh ${{ env.REMOTE_USER }}@${{ env.REMOTE_SERVER }} 'cd /opt/infrastructure && ./scripts/rollback-manager.sh status'" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "# Perform manual rollback (replace CHECKPOINT_ID with actual ID)" >> $GITHUB_STEP_SUMMARY
              echo "ssh ${{ env.REMOTE_USER }}@${{ env.REMOTE_SERVER }} 'cd /opt/infrastructure && ./scripts/rollback-manager.sh rollback CHECKPOINT_ID'" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### Automated Rollback via Workflow:" >> $GITHUB_STEP_SUMMARY
              echo "You can also trigger a rollback through GitHub Actions by running this workflow with the 'rollback_checkpoint' parameter." >> $GITHUB_STEP_SUMMARY
            fi
          fi