name: Vault Secrets Synchronization

on:
  push:
    paths:
      - 'secrets/**'
      - '.github/workflows/vault-secrets-sync.yml'
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for secret sync'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - production
          - staging
          - develop
      force_sync:
        description: 'Force synchronization even if secrets exist'
        required: false
        default: false
        type: boolean

env:
  VAULT_NAMESPACE: "root"

jobs:
  validate-secrets:
    name: Validate Secret Configurations
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install pyyaml jsonschema hvac

      - name: Validate secret configurations
        run: |
          python3 << EOF
          import yaml
          import json
          import jsonschema
          import os
          import glob
          
          # Define schema for secret configurations
          schema = {
              "type": "object",
              "properties": {
                  "secrets": {
                      "type": "object",
                      "patternProperties": {
                          "^[a-zA-Z0-9_-]+$": {
                              "type": "object",
                              "properties": {
                                  "path": {"type": "string"},
                                  "data": {"type": "object"},
                                  "policy": {"type": "string"},
                                  "environments": {
                                      "type": "array",
                                      "items": {"type": "string"}
                                  }
                              },
                              "required": ["path", "data"]
                          }
                      }
                  }
              },
              "required": ["secrets"]
          }
          
          # Validate all secret files
          secret_files = glob.glob("secrets/*.yml") + glob.glob("secrets/*.yaml")
          
          for file_path in secret_files:
              print(f"Validating {file_path}...")
              with open(file_path, 'r') as f:
                  config = yaml.safe_load(f)
              
              try:
                  jsonschema.validate(config, schema)
                  print(f"✓ {file_path} is valid")
              except jsonschema.ValidationError as e:
                  print(f"✗ {file_path} validation failed: {e}")
                  exit(1)
          
          print("All secret configurations are valid!")
          EOF

  sync-secrets:
    name: Synchronize Secrets to Vault
    runs-on: ubuntu-latest
    needs: validate-secrets
    strategy:
      matrix:
        environment: ${{ fromJSON(
          github.event.inputs.environment == 'all' && '["production", "staging", "develop"]' ||
          format('["{0}"]', github.event.inputs.environment)
        ) }}
    
    environment: ${{ matrix.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Vault CLI
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install vault

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          pip install pyyaml hvac python-dotenv

      - name: Authenticate with Vault
        env:
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
          VAULT_ROLE_ID: ${{ secrets.VAULT_ROLE_ID }}
          VAULT_SECRET_ID: ${{ secrets.VAULT_SECRET_ID }}
        run: |
          # Authenticate using AppRole
          VAULT_TOKEN=$(vault write -field=token auth/approle/login \
            role_id="$VAULT_ROLE_ID" \
            secret_id="$VAULT_SECRET_ID")
          echo "VAULT_TOKEN=$VAULT_TOKEN" >> $GITHUB_ENV

      - name: Sync secrets to Vault
        env:
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
          VAULT_TOKEN: ${{ env.VAULT_TOKEN }}
          ENVIRONMENT: ${{ matrix.environment }}
          FORCE_SYNC: ${{ github.event.inputs.force_sync }}
        run: |
          python3 << 'EOF'
          import yaml
          import hvac
          import os
          import glob
          from pathlib import Path
          
          # Initialize Vault client
          client = hvac.Client(
              url=os.getenv('VAULT_ADDR'),
              token=os.getenv('VAULT_TOKEN')
          )
          
          if not client.is_authenticated():
              print("❌ Failed to authenticate with Vault")
              exit(1)
          
          environment = os.getenv('ENVIRONMENT')
          force_sync = os.getenv('FORCE_SYNC', 'false').lower() == 'true'
          
          print(f"🔄 Syncing secrets for environment: {environment}")
          
          # Load all secret configurations
          secret_files = glob.glob("secrets/*.yml") + glob.glob("secrets/*.yaml")
          
          for file_path in secret_files:
              print(f"\n📁 Processing {file_path}...")
              
              with open(file_path, 'r') as f:
                  config = yaml.safe_load(f)
              
              for secret_name, secret_config in config.get('secrets', {}).items():
                  # Check if secret is for this environment
                  environments = secret_config.get('environments', ['all'])
                  if 'all' not in environments and environment not in environments:
                      print(f"⏭️  Skipping {secret_name} (not for {environment})")
                      continue
                  
                  # Build secret path
                  base_path = secret_config['path']
                  full_path = f"{base_path}/{environment}"
                  
                  print(f"🔍 Processing secret: {secret_name} -> {full_path}")
                  
                  # Check if secret already exists
                  try:
                      existing = client.secrets.kv.v2.read_secret_version(
                          path=full_path,
                          mount_point='secret'
                      )
                      
                      if not force_sync:
                          print(f"⚠️  Secret {full_path} already exists, skipping (use force_sync to override)")
                          continue
                      else:
                          print(f"🔄 Force syncing existing secret {full_path}")
                  except hvac.exceptions.InvalidPath:
                      print(f"✨ Creating new secret {full_path}")
                  
                  # Write secret to Vault
                  try:
                      # Process secret data, replacing environment variables
                      processed_data = {}
                      for key, value in secret_config['data'].items():
                          if isinstance(value, str) and value.startswith('$'):
                              # Get environment variable
                              env_var = value[1:]  # Remove $ prefix
                              env_value = os.getenv(env_var)
                              if env_value is None:
                                  print(f"⚠️  Environment variable {env_var} not found, using placeholder")
                                  processed_data[key] = f"PLACEHOLDER_{env_var}"
                              else:
                                  processed_data[key] = env_value
                          else:
                              processed_data[key] = value
                      
                      client.secrets.kv.v2.create_or_update_secret(
                          path=full_path,
                          secret=processed_data,
                          mount_point='secret'
                      )
                      
                      print(f"✅ Successfully synced {secret_name} to {full_path}")
                      
                  except Exception as e:
                      print(f"❌ Failed to sync {secret_name}: {e}")
                      exit(1)
          
          print(f"\n🎉 Secret synchronization completed for {environment}")
          EOF

  setup-policies:
    name: Setup Vault Policies
    runs-on: ubuntu-latest
    needs: sync-secrets
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Vault CLI
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install vault

      - name: Authenticate with Vault
        env:
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
          VAULT_ROLE_ID: ${{ secrets.VAULT_ROLE_ID }}
          VAULT_SECRET_ID: ${{ secrets.VAULT_SECRET_ID }}
        run: |
          VAULT_TOKEN=$(vault write -field=token auth/approle/login \
            role_id="$VAULT_ROLE_ID" \
            secret_id="$VAULT_SECRET_ID")
          echo "VAULT_TOKEN=$VAULT_TOKEN" >> $GITHUB_ENV

      - name: Create/Update Vault Policies
        env:
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
          VAULT_TOKEN: ${{ env.VAULT_TOKEN }}
        run: |
          # Create application-specific policies
          for env in production staging develop; do
            cat > /tmp/${env}-app-policy.hcl << EOF
          # Policy for applications in $env environment
          path "secret/data/applications/*/$env" {
            capabilities = ["read"]
          }
          
          path "secret/metadata/applications/*/$env" {
            capabilities = ["read"]
          }
          
          # Database dynamic secrets for $env
          path "database/creds/$env-*" {
            capabilities = ["read"]
          }
          
          # PKI certificates for $env
          path "pki/$env/issue/*" {
            capabilities = ["create", "update"]
          }
          EOF
          
            # Apply policy
            vault policy write ${env}-applications /tmp/${env}-app-policy.hcl
            echo "✅ Created policy: ${env}-applications"
          done
          
          # Create CI/CD policy
          cat > /tmp/cicd-policy.hcl << EOF
          # Policy for CI/CD pipelines
          path "secret/data/applications/*" {
            capabilities = ["create", "read", "update", "delete", "list"]
          }
          
          path "secret/metadata/applications/*" {
            capabilities = ["create", "read", "update", "delete", "list"]
          }
          
          # Allow creating app roles
          path "auth/approle/role/*" {
            capabilities = ["create", "read", "update", "delete", "list"]
          }
          
          path "auth/approle/role/*/secret-id" {
            capabilities = ["create", "update"]
          }
          
          # Policy management
          path "sys/policies/acl/*" {
            capabilities = ["create", "read", "update", "delete", "list"]
          }
          EOF
          
          vault policy write cicd-pipeline /tmp/cicd-policy.hcl
          echo "✅ Created policy: cicd-pipeline"

  setup-app-roles:
    name: Setup Application Roles
    runs-on: ubuntu-latest
    needs: setup-policies
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Vault CLI
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install vault

      - name: Authenticate with Vault
        env:
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
          VAULT_ROLE_ID: ${{ secrets.VAULT_ROLE_ID }}
          VAULT_SECRET_ID: ${{ secrets.VAULT_SECRET_ID }}
        run: |
          VAULT_TOKEN=$(vault write -field=token auth/approle/login \
            role_id="$VAULT_ROLE_ID" \
            secret_id="$VAULT_SECRET_ID")
          echo "VAULT_TOKEN=$VAULT_TOKEN" >> $GITHUB_ENV

      - name: Create Application Roles
        env:
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
          VAULT_TOKEN: ${{ env.VAULT_TOKEN }}
        run: |
          # Create app roles for each environment
          for env in production staging develop; do
            echo "🔄 Creating AppRole for $env environment..."
            
            # Create the role
            vault write auth/approle/role/${env}-app \
              token_policies="${env}-applications" \
              token_ttl=1h \
              token_max_ttl=24h \
              bind_secret_id=true \
              secret_id_ttl=10m
            
            # Get role ID
            ROLE_ID=$(vault read -field=role_id auth/approle/role/${env}-app/role-id)
            echo "Role ID for ${env}: $ROLE_ID"
            
            # Generate a secret ID (for demonstration - in practice, this would be done securely)
            SECRET_ID=$(vault write -field=secret_id auth/approle/role/${env}-app/secret-id)
            echo "Secret ID generated for ${env}"
            
            echo "✅ AppRole created for ${env} environment"
          done

  audit-secrets:
    name: Audit Secret Access
    runs-on: ubuntu-latest
    needs: [sync-secrets, setup-app-roles]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Vault CLI
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install vault

      - name: Authenticate with Vault
        env:
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
          VAULT_ROLE_ID: ${{ secrets.VAULT_ROLE_ID }}
          VAULT_SECRET_ID: ${{ secrets.VAULT_SECRET_ID }}
        run: |
          VAULT_TOKEN=$(vault write -field=token auth/approle/login \
            role_id="$VAULT_ROLE_ID" \
            secret_id="$VAULT_SECRET_ID")
          echo "VAULT_TOKEN=$VAULT_TOKEN" >> $GITHUB_ENV

      - name: Generate Audit Report
        env:
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
          VAULT_TOKEN: ${{ env.VAULT_TOKEN }}
        run: |
          echo "# Vault Secrets Audit Report" > audit-report.md
          echo "Generated at: $(date -u)" >> audit-report.md
          echo "" >> audit-report.md
          
          echo "## Secrets Summary" >> audit-report.md
          echo "| Path | Environments | Last Modified |" >> audit-report.md
          echo "|------|-------------|---------------|" >> audit-report.md
          
          # List all secrets
          vault kv metadata -format=json secret/ | jq -r '.data.keys[]' | while read secret_path; do
            for env in production staging develop; do
              full_path="${secret_path%/}/$env"
              if vault kv metadata secret/$full_path >/dev/null 2>&1; then
                modified=$(vault kv metadata -format=json secret/$full_path | jq -r '.data.updated_time')
                echo "| secret/$full_path | $env | $modified |" >> audit-report.md
              fi
            done
          done
          
          echo "" >> audit-report.md
          echo "## Policies" >> audit-report.md
          echo "| Policy Name | Associated Roles |" >> audit-report.md
          echo "|-------------|------------------|" >> audit-report.md
          
          vault policy list | while read policy; do
            roles=$(vault list -format=json auth/approle/role 2>/dev/null | jq -r '.[]' | while read role; do
              if vault read auth/approle/role/$role | grep -q $policy; then
                echo $role
              fi
            done | tr '\n' ',' | sed 's/,$//')
            echo "| $policy | $roles |" >> audit-report.md
          done

      - name: Upload Audit Report
        uses: actions/upload-artifact@v4
        with:
          name: vault-audit-report
          path: audit-report.md

  notification:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [sync-secrets, setup-policies, setup-app-roles, audit-secrets]
    if: always()
    
    steps:
      - name: Determine Status
        id: status
        run: |
          if [[ "${{ needs.sync-secrets.result }}" == "success" && "${{ needs.setup-policies.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=Vault secrets synchronization completed successfully" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=Vault secrets synchronization failed" >> $GITHUB_OUTPUT
          fi

      - name: Send Slack Notification
        if: always() && vars.SLACK_WEBHOOK_URL
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          color="good"
          if [[ "${{ steps.status.outputs.status }}" == "failure" ]]; then
            color="danger"
          fi
          
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"attachments\": [
                {
                  \"color\": \"$color\",
                  \"title\": \"Vault Secrets Sync ${{ steps.status.outputs.status }}\",
                  \"text\": \"${{ steps.status.outputs.message }}\",
                  \"fields\": [
                    {
                      \"title\": \"Repository\",
                      \"value\": \"${{ github.repository }}\",
                      \"short\": true
                    },
                    {
                      \"title\": \"Trigger\",
                      \"value\": \"${{ github.event_name }}\",
                      \"short\": true
                    },
                    {
                      \"title\": \"Commit\",
                      \"value\": \"${{ github.sha }}\",
                      \"short\": true
                    }
                  ],
                  \"footer\": \"Vault Secrets Management\",
                  \"ts\": $(date +%s)
                }
              ]
            }" \
            $SLACK_WEBHOOK_URL